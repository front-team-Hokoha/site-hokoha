
/* 

| 1.0.0 | 06/08/2024 | autofill pour éviter les fullscreen des items seuls | 
| 0.0.1 |  | Mise en place | 
*/


//Now we can define the mixin that will create our gallery; the min-width of the items will be the only argument of this mixin:
//The minmax function allows us to set a min-width for our elements, while the repeat() function takes care of actually creating the grid.
@mixin gridAuto($min-width, $fallback: 3) {

    // fallback for IE
  > * {
    float: left;
    width: calc(100%/#{$fallback} - #{$gap-horizontal});

    &:nth-child(#{$fallback}n + 1) {
      clear: both;
    }
  }

  @supports(grid-area: auto) {
    // 1.0.0 -> grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
    grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr)); // 1.0.0 autofill pour éviter les fullscreen des items seuls

    > * {
      width: auto;
      margin: 0;
    }
  }
}




/*
The mixin now accepts two arguments: the first one is the minimum width of the items in the gallery (the same as before — it will be used only if the browsers support CSS Grid), the second (which is optional — default value is 3) is the number of items per row on browsers that do not support CSS Grid (where the fallback is applied)
*/



@mixin grid-80 {
    @include grid;
    @include gridAuto(80px,8);
    // auteur des cellules
    grid-auto-rows: minmax(3rem, auto);
}

.grid-80 {
    @include grid-80;
}


.grid-160 {
    @include grid;
    @include gridAuto(160px,6);
    // auteur des cellules
    grid-auto-rows: minmax(3rem, auto);
}



.grid-240 {
    @include grid;
    @include gridAuto(240px,5);
    // auteur des cellules
    grid-auto-rows: minmax(3rem, auto);
}


.grid-320 {
    @include grid;
    @include gridAuto(320px,4);
    // auteur des cellules
    grid-auto-rows: minmax(3rem, auto);
}



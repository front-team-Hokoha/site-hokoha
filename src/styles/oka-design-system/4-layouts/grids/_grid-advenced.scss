
//https://medium.com/codyhouse/create-your-design-system-part-2-grid-layout-aa961d59b8d6
//
//grid gap
$gap-horizontal: 20px;
$gap-vertical: $gap-horizontal;
$grid-columns: 12;

//mixins definition
@mixin grid {
  @supports(grid-area: auto) {
    display: grid;
    grid-column-gap: $gap-horizontal;
    grid-row-gap: $gap-vertical;
  }
}

@mixin gridAdvanced($cols...) {
  $i: 1;
  $span: 0;
  @each $col in $cols {
    > :nth-of-type(#{$i}) {
      @if nth($col,2) == -1 {
        $span: $grid-columns - nth($col,2) - nth($col,1);
      } @else {
        $span: nth($col,2) - nth($col,1);
      }
      width: calc( #{$span}*((100% - #{$gap-horizontal}*#{$grid-columns})/#{$grid-columns}) + (#{nth($col,1)} - 1)*#{$gap-horizontal} - 1px);
      min-width: 0px;
    }
    $i: $i + 1;
  }

  @supports(grid-area: auto) {
    grid-template-columns: repeat($grid-columns, 1fr);

    $i: 1;
    @each $col in $cols {
      > :nth-of-type(#{$i}) {
        grid-column-start: nth($col,1);
        grid-column-end: nth($col,2);
        grid-row-start: nth($col,3);
        grid-row-end: nth($col,4);
      }
      $i: $i + 1;
    }

    > :nth-child(n) {
      width: auto;
      margin: 0;
    }
  }
}



//here's where we use the grid mixins
.containerAdvenced {
  @include grid;
  grid-auto-rows: 90px;

  @media only screen and (min-width: 600px) {
        @include gridAdvanced(
            (1, 8, 1, 3),
            (1, 8, 3, 5),
            (5, -1, 2, 4)
        );
    }
}

//demo style
.containerAdvenced {
  font-family: sans-serif;
  max-width: 1000px;
  margin: 0 auto;

  > div:nth-of-type(1) {
    background-color: #ead8c2;
  }

  > div:nth-of-type(2) {
    background-color: #3a568c;
  }

  > div:nth-of-type(3) {
    background-color: #eca414;
    opacity: .8;
  }

  > div:not(:first-of-type) {
    color: white;
  }

  > div {
    display: flex;
    justify-content: center;
    align-items: center;
  }
}

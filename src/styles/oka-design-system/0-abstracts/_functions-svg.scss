
//
//  Function to create an optimized svg url
/**
| 4.0.0 | 20/04/2023 | Nomage du fichier  |
|  3.1.0 | 03/06/2021 | Revue |
// 1.0.0
*/
//
// https://css-tricks.com/probably-dont-base64-svg/
// https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
// https://codepen.io/jakob-e/pen/doMoML
//
@function svg-url($svg){
    //
    //  Add missing namespace
    //
    @if not str-index($svg,xmlns) {
        $svg: str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');
    }
    //
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    //
    $encoded:'';
    $slice: 2000;
    $index: 0;

    //$loops: ceil(str-length($svg)/$slice); // -> For Gulp

    $calc : calc(str-length($svg)/$slice); // -> For Webpack
    $loops: ceil($calc); // -> For Webpack
    
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        //   Encode
        //
        $chunk: str-replace($chunk,'"', '\'');
        $chunk: str-replace($chunk,'%', '%25');
        $chunk: str-replace($chunk,'&', '%26');
        $chunk: str-replace($chunk,'#', '%23');
        $chunk: str-replace($chunk,'{', '%7B');
        $chunk: str-replace($chunk,'}', '%7D');
        $chunk: str-replace($chunk,'<', '%3C');
        $chunk: str-replace($chunk,'>', '%3E');

        //
        //    The maybe list
        //
        //    Keep size and compile time down
        //    ... only add on documented fail
        //
        //  $chunk: str-replace($chunk, '|', '%7C');
        //  $chunk: str-replace($chunk, '[', '%5B');
        //  $chunk: str-replace($chunk, ']', '%5D');
        //  $chunk: str-replace($chunk, '^', '%5E');
        //  $chunk: str-replace($chunk, '`', '%60');
        //  $chunk: str-replace($chunk, ';', '%3B');
        //  $chunk: str-replace($chunk, '?', '%3F');
        //  $chunk: str-replace($chunk, ':', '%3A');
        //  $chunk: str-replace($chunk, '@', '%40');
        //  $chunk: str-replace($chunk, '=', '%3D');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml,#{$encoded}");
}

//  Background svg mixin
@mixin background-svg($svg){
    background-image: svg-url($svg);
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @return if($index,
        str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace),
        $string);
}


/* ------------- */
/* ==end         */
/* ------------- */


// https://codepen.io/Kinaly/pen/OMNQpY
/* custom mixin to replace a defined fill color with another one */
@function svg-url-with-replaced-fill($svg, $fill-to-replace, $new-fill) {
  $replaced-svg: str-replace($svg, $fill-to-replace, $new-fill);
  $replaced-svg-url: svg-url('#{$replaced-svg}');
  @return $replaced-svg-url;
}


//  Background svg mixin
@mixin background-svg-fill($svg, $fill-to-replace, $new-fill){
    background-image: svg-url-with-replaced-fill($svg, $fill-to-replace, $new-fill);
}

/* ------------- */
/* ==end         */
/* ------------- */

// Exemple
// // declaration
$exemplesvg-avatar:"<svg  xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 64 64' enable-background='new 0 0 64 64' xml:space='preserve'><rect fill='none' width='64' height='64'/><circle fill='white' cx='32' cy='25.8' r='14.5'/><circle fill='white' cx='32' cy='67.7' r='29.1'/></svg>";

// appel
//
//
.exemplesvg-avatar{
    @include background-svg($exemplesvg-avatar); // <= here :-)
}
